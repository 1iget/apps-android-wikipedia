apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
apply from: '../config/quality.gradle'

import com.android.ddmlib.DdmPreferences

final int ADB_TIMEOUT = 5 * 60 * 1000
final boolean continuousIntegrationBuild = System.getenv('JENKINS_HOME') != null
final boolean preDexEnabled = hasProperty('preDex') ?
        Boolean.valueOf(preDex.toString()) :
        !continuousIntegrationBuild
if (!preDexEnabled) {
    println 'Pre-dexing disabled.'
}

if (continuousIntegrationBuild) {
    DdmPreferences.setTimeOut(ADB_TIMEOUT)
    println "Device timeout is ${DdmPreferences.getTimeOut()}ms"
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

def computeVersionName(label) {
    return "2.0.${android.defaultConfig.versionCode}-${label}-${date}"
}

final JavaVersion JAVA_VERSION = JavaVersion.VERSION_1_7
if (JavaVersion.current() != JAVA_VERSION) {
    throw new IllegalStateException("Incorrect Java Development Kit version; expected "
            + JAVA_VERSION + " but found " + JavaVersion.current())
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'
    compileOptions {
        sourceCompatibility = JAVA_VERSION
        targetCompatibility = JAVA_VERSION
    }
    dexOptions {
        preDexLibraries = preDexEnabled
    }
    defaultConfig {
        applicationId 'org.wikipedia'
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 108
        testApplicationId 'org.wikipedia.test'
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        dev {
            versionName computeVersionName("dev")
            applicationId 'org.wikipedia.dev'
        }
        prod {
            versionName computeVersionName("r")
        }
        releasesprod {
            versionName computeVersionName("releasesprod")
        }
        alpha {
            versionName computeVersionName("alpha")
            applicationId 'org.wikipedia.alpha'
        }
        beta {
            versionName computeVersionName("beta")
            applicationId 'org.wikipedia.beta'
        }
        amazon {
            versionName computeVersionName("amazon")
        }
        custom {
            versionName computeVersionName(customChannel)
            applicationId getProperty('customApplicationId')
            // next line is for injecting a custom channel value into the custom/AndroidManifest.xml
            manifestPlaceholders = [customChannel:getProperty('customChannel').toString()]
        }
    }
    // while we still have lint errors; remove once those are fixed
    lintOptions {
        disable 'MissingTranslation'
        warning 'NewApi' // until https://code.google.com/p/android/issues/detail?id=137195 is released
    }
}

def compileSubprojectOrModule = { String projectName,
                                  String moduleName,
                                  String excludeGroup = null,
                                  String excludeModule = null ->
    def dependency = project.findProject(projectName) ?: moduleName
    project.dependencies.add('compile', dependency, {exclude group: excludeGroup, module: excludeModule })
}

dependencies {
    compileSubprojectOrModule ':java-mwapi:json', 'org.mediawiki.api:json:1.3.2', 'org.json', 'json'

    // To keep the Maven Central dependencies up-to-date
    // use http://gradleplease.appspot.com/ or http://search.maven.org/.
    // Debug with ./gradlew -q app:dependencies --configuration compile

    compile 'com.android.support:appcompat-v7:22.2.1' // includes support-v4
    compile 'com.android.support:design:22.2.1'
    compile 'com.android.support:percent:22.2.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup:otto:1.3.6'
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'com.mobsandgeeks:android-saripaar:1.0.3'
    compile 'com.nineoldandroids:library:2.4.0'
    compile('ch.acra:acra:4.5.0') {
        exclude group: 'org.json', module: 'json'
    }
    compile 'com.github.chrisbanes.photoview:library:1.2.3'
    compile 'com.github.ryanjohn1:onboarding:1.0.3'
    compile 'com.jakewharton:disklrucache:2.0.2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.robolectric:robolectric:3.0-rc3'
    testCompile 'com.squareup.okhttp:mockwebserver:2.4.0'
}

// The next block is for setting the release signing config from a file outside the git repo
// To make release builds work:
// Copy the signing.properties.sample file to ~/.sign/signing.properties and adjust the values.
def Properties props = new Properties()
def propFile = new File(System.getProperty('user.home'), '.sign/signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        System.err.println propFile.toString() + ' found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    System.err.println propFile.toString() + ' not found'
    android.buildTypes.release.signingConfig = null
}